pipeline {
    agent any

    environment {
        dockerImage = ''
        JENKINS_USER_ID = "${sh(script: 'id -u', returnStdout: true).trim()}"
        JENKINS_GROUP_ID = "${sh(script: 'id -g', returnStdout: true).trim()}"
        currentWorkspace = ''
    }

    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    stages {
        stage("Check Docker version") {
            steps {
                echo 'JENKINS_USER_ID'
                echo JENKINS_USER_ID
                echo 'JENKINS_GROUP_ID'
                echo JENKINS_GROUP_ID
                sh '''
                  docker version
                  docker info
                '''
            }
        }

        stage('Docker System Prune') {
            steps {
                sh 'docker system prune -a --volumes -f'
            }
        }

        stage('Build Image') {
            steps {
                script {
                    dockerImage = docker.build("docker-jenkins-automation:latest")
                    echo "image built"
                    sh 'docker image ls'
                    currentWorkspace = "$WORKSPACE"
                    echo "Current workspace 1 is ${currentWorkspace}"
                }
            }
        }

        stage('API Automation') {
            agent {
                docker {
                    image 'docker-jenkins-automation:latest'
                    label 'project-source-code-workspace-container'
                    args '-v $HOME/.m2:/root/.m2'
                    //args '-v $HOME/.m2:/var/maven/.m2'
                    customWorkspace '/usr/src/test-project'
                    reuseNode true
                }
            }
            steps {
                sh '''#!/bin/bash
                    currentWorkspace = "$WORKSPACE"
                    echo "Current workspace 2 is ${currentWorkspace}"
                      echo "Check permissions 1"
                      echo "* Reuse node using new image "
                      echo "Within container using workspace as working directory.."
                      whoami
                      pwd
                      ls -lrt
                      echo "Target directory.."
                      mkdir -p target
                      ls -lrt
                      docker ps 
                      docker-compose config
                      echo "printenv"
                      printenv
                '''
/*                sh 'docker-compose -f docker-compose-api.yaml up -d --no-color --no-build'
                sh 'docker-compose -f docker-compose-api.yaml ps'
                sh 'docker-compose -f docker-compose-api.yaml run -e TYPE="@API" api-test-service'*/

                sh '''#!/bin/bash
                        echo "Check permissions 2"

                        chown -R $JENKINS_USER_ID:$JENKINS_GROUP_ID "$WORKSPACE"
                        chmod -R ug+rwx "$WORKSPACE"
                        whoami
                        pwd
                        ls -lrt
                        docker ps 
                        chown -R $JENKINS_USER_ID:$JENKINS_GROUP_ID ./run-api-tests.sh
                        chmod ug+x ./run-api-tests.sh
                        echo "run-api-tests.sh.."
                        ./run-api-tests.sh
                        docker ps 
                '''
                /*script {
                    echo "Docker compose run.."
                    sh 'chmod +x -R ${env.WORKSPACE}'
                    sh './run-api-tests.sh'
                }*/

            }
        }

        stage('Generate HTML report') {
            steps {
                cucumber buildStatus: '',
                        reportTitle: 'Cucumber report',
                        fileIncludePattern: '**/*.json',
                        jsonReportDirectory: "${currentWorkspace}/target",
                        trendsLimit: 10,
                        classifications: [
                                [
                                        'key'  : 'API',
                                        'value': 'API'
                                ]
                        ]
            }
        }
    }

    post {
        always {
            // publish html reports
            publishHTML target: [
                    allowMissing         : false,
                    alwaysLinkToLastBuild: false,
                    keepAll              : true,
                    reportDir            : "${currentWorkspace}/target/Reports/",
                    reportFiles          : 'automated-test-report.html',
                    reportName           : 'Extent Test Report'
            ]
            publishHTML target: [
                    allowMissing         : false,
                    alwaysLinkToLastBuild: false,
                    keepAll              : true,
                    reportDir            : "${currentWorkspace}/target/cucumber-html-report/",
                    reportFiles          : 'regression-tests.html',
                    reportName           : 'Cucumber Test Report'
            ]

            cleanWs()
        }
    }
}










